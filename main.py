import telebot
import requests
import random
from telebot import types
from dictionaries import idinah_list, hello_list


TELEGRAM_TOKEN = '7266703224:AAHLwpIqBE-Rd9NVkSmD-bSD0IR6clmdSOQ'
API_KEY = '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'
API_URL = 'https://openrouter.ai/api/v1/chat/completions'
MODEL = "mistralai/mistral-7b-instruct"

mtvzg_bot = telebot.TeleBot(TELEGRAM_TOKEN)


@mtvzg_bot.message_handler(commands=['start'])
def start_message(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    buttons = ["–ü—Ä–∏–≤–µ—Ç", "–ü–æ–º–æ—â—å", "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", "–í–æ–ø—Ä–æ—Å"]
    keyboard.add(*[types.KeyboardButton(btn) for btn in buttons])
    mtvzg_bot.send_chat_action(message.chat.id, 'typing')

    random_greeting = random.choice(hello_list)
    mtvzg_bot.send_message(
        message.chat.id,
        f'{random_greeting}, {message.from_user.first_name}! –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.',
        reply_markup=keyboard
    )


@mtvzg_bot.message_handler(commands=['ask'])
def ask_handler(message):
    msg = mtvzg_bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    mtvzg_bot.register_next_step_handler(msg, ask_gpt)


def ask_gpt(message):
    user_question = message.text

    mtvzg_bot.send_chat_action(message.chat.id, 'typing')

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://t.me/mtvzgSupportBot",  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û, –∏–Ω–∞—á–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞
        "X-Title": "TelegramBot"
    }

    payload = {
        "model": MODEL,
        "messages": [{"role": "user", "content": user_question}],
        "temperature": 0.7
    }

    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        response.raise_for_status()
        data = response.json()
        reply = data["choices"][0]["message"]["content"]
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {e}"

    mtvzg_bot.send_message(message.chat.id, reply)


@mtvzg_bot.message_handler(func=lambda msg: True)
def check_input_messages(message):
    mtvzg_bot.send_chat_action(message.chat.id, 'typing')
    text = message.text.lower()

    if text in idinah_list:
        mtvzg_bot.reply_to(message, '–¢—ã –∏–¥–∏ –Ω–∞—Ö—É–π!')
    elif text in hello_list:
        mtvzg_bot.reply_to(message, random.choice(hello_list))
    elif message.text == "–ü–æ–º–æ—â—å":
        mtvzg_bot.reply_to(message, "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ.")
    elif message.text == "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?":
        mtvzg_bot.reply_to(message,
                           "–Ø –º–æ–≥—É:\n1. –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è\n2. –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã\n3. –ü–æ—Ö–∞–º–∏—Ç—å, –µ—Å–ª–∏ —á—Ç–æ üòú\n4. –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ /ask")
    elif message.text == "–í–æ–ø—Ä–æ—Å":
        ask_handler(message)
    else:
        mtvzg_bot.reply_to(message, "–ù–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π /ask –∏–ª–∏ –Ω–∞–∂–º–∏ /start.")


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
mtvzg_bot.polling(none_stop=True)

